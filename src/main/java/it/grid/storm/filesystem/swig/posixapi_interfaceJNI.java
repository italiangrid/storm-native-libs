/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package it.grid.storm.filesystem.swig;

public class posixapi_interfaceJNI {

  static {
    try {
      System.loadLibrary("posixapi_interface");
    } catch (UnsatisfiedLinkError e) {
	  final String libfile 
			= "'" + System.mapLibraryName("posixapi_interface") + "'";
	  final org.slf4j.Logger log 
			= org.slf4j.LoggerFactory.getLogger(posixapi_interfaceJNI.class);
      log.error("Native code library " + libfile
				 + " failed to load: " + e.getMessage());
	  // give some informational details, may be useful when debugging
	  final String ldpath = System.getProperty("java.library.path");
	  if (null != ldpath) 
	    log.info("Java VM searched for " + libfile 
            + "in java.library.path: " + ldpath);
   	  else
		log.info("Java VM library search path is null!");
      log.info("Add the library location to the environment variable LD_LIBRARY_PATH or to the Java property java.library.path");
	  throw new UnsatisfiedLinkError("Native code library " + libfile
				 + " failed to load: " + e.getMessage());
    }
  }

  public final static native long new_error(String jarg1);
  public final static native void delete_error(long jarg1);
  public final static native String error_getMessage(long jarg1, error jarg1_);
  public final static native long new_system_error__SWIG_0(String jarg1, int jarg2);
  public final static native long new_system_error__SWIG_1(String jarg1);
  public final static native void delete_system_error(long jarg1);
  public final static native String system_error_getMessage(long jarg1, system_error jarg1_);
  public final static native String system_error_error_message(long jarg1, system_error jarg1_, int jarg2);
  public final static native long new_acl_not_supported__SWIG_0();
  public final static native long new_acl_not_supported__SWIG_1(String jarg1);
  public final static native void delete_acl_not_supported(long jarg1);
  public final static native long new_invalid_path(String jarg1);
  public final static native void delete_invalid_path(long jarg1);
  public final static native long new_permission_denied(String jarg1);
  public final static native void delete_permission_denied(long jarg1);
  public final static native long new_wrong_filesystem_type(String jarg1);
  public final static native void delete_wrong_filesystem_type(long jarg1);
  public final static native long new_quota_not_supported(String jarg1);
  public final static native void delete_quota_not_supported(long jarg1);
  public final static native int chmod(String jarg1, int jarg2);
  public final static native int chown(String jarg1, int jarg2, int jarg3);
  public final static native int creat(String jarg1, int jarg2);
  public final static native int mkdir(String jarg1, int jarg2);
  public final static native int setuid(int jarg1);
  public final static native int unlink(String jarg1);
  public final static native int umask(int jarg1);
  public final static native int geteuid();
  public final static native int getuid();
  public final static native boolean fs_acl_access(long jarg1, fs_acl jarg1_, int jarg2, int jarg3, int[] jarg4);
  public final static native void fs_acl_clear(long jarg1, fs_acl jarg1_);
  public final static native void fs_acl_load__SWIG_0(long jarg1, fs_acl jarg1_, String jarg2, boolean jarg3) throws it.grid.storm.filesystem.FilesystemError, java.lang.RuntimeException;
  public final static native void fs_acl_load__SWIG_1(long jarg1, fs_acl jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError, java.lang.RuntimeException;
  public final static native void fs_acl_enforce(long jarg1, fs_acl jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError, java.lang.RuntimeException;
  public final static native void delete_fs_acl(long jarg1);
  public final static native int fs_acl_get_group_owner_gid(long jarg1, fs_acl jarg1_);
  public final static native int fs_acl_get_group_owner_perm(long jarg1, fs_acl jarg1_);
  public final static native int fs_acl_get_mask(long jarg1, fs_acl jarg1_);
  public final static native int fs_acl_get_other_perm(long jarg1, fs_acl jarg1_);
  public final static native int fs_acl_get_owner_perm(long jarg1, fs_acl jarg1_);
  public final static native int fs_acl_get_owner_uid(long jarg1, fs_acl jarg1_);
  public final static native boolean fs_acl_has_group_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native boolean fs_acl_has_user_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native boolean fs_acl_has_explicit_mask(long jarg1, fs_acl jarg1_);
  public final static native boolean fs_acl_is_group_perm_masked(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native boolean fs_acl_is_group_owner(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native boolean fs_acl_is_owner(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native boolean fs_acl_is_permission_subset(int jarg1, int jarg2);
  public final static native boolean fs_acl_is_user_perm_masked(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_get_group_effective_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_get_group_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_get_user_effective_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_get_user_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_grant_group_owner_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_grant_group_perm(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_grant_group_perm_not_owner(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_grant_other_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_grant_owner_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_grant_user_perm(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_grant_user_perm_not_owner(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native boolean fs_acl_has_extended_acl(long jarg1, fs_acl jarg1_);
  public final static native int fs_acl_remove_group_perm_not_owner(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_remove_user_perm_not_owner(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_revoke_group_owner_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_revoke_group_perm(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_revoke_group_perm_not_owner(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_revoke_other_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_revoke_owner_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_revoke_user_perm(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_revoke_user_perm_not_owner(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_set_group_owner_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_set_group_perm(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_set_group_perm_not_owner(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_set_mask(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_set_other_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_set_owner_perm(long jarg1, fs_acl jarg1_, int jarg2);
  public final static native int fs_acl_set_user_perm(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native int fs_acl_set_user_perm_not_owner(long jarg1, fs_acl jarg1_, int jarg2, int jarg3);
  public final static native long fs_acl_size(long jarg1, fs_acl jarg1_);
  public final static native int[] fs_acl_get_uid_list(long jarg1, fs_acl jarg1_);
  public final static native long fs_acl_get_uid_list_size(long jarg1, fs_acl jarg1_);
  public final static native int[] fs_acl_get_gid_list(long jarg1, fs_acl jarg1_);
  public final static native void delete_genericfs(long jarg1);
  public final static native long genericfs_get_free_space(long jarg1, genericfs jarg1_) throws it.grid.storm.filesystem.FilesystemError;
  public final static native long genericfs_get_number_of_blocks(long jarg1, genericfs jarg1_, String jarg2);
  public final static native long genericfs_get_size(long jarg1, genericfs jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError;
  public final static native long genericfs_get_last_modification_time(long jarg1, genericfs jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError;
  public final static native long genericfs_get_exact_size(long jarg1, genericfs jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError;
  public final static native long genericfs_get_exact_last_modification_time(long jarg1, genericfs jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError;
  public final static native int genericfs_truncate_file(long jarg1, genericfs jarg1_, String jarg2, long jarg3) throws it.grid.storm.filesystem.FilesystemError;
  public final static native boolean genericfs_is_file_on_disk(long jarg1, genericfs jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError;
  public final static native void genericfs_change_group_ownership(long jarg1, genericfs jarg1_, String jarg2, String jarg3) throws it.grid.storm.filesystem.FilesystemError;
  public final static native long genericfs_new_acl(long jarg1, genericfs jarg1_) throws it.grid.storm.filesystem.FilesystemError;
  public final static native long new_posixfs(String jarg1) throws it.grid.storm.filesystem.AclNotSupported, it.grid.storm.filesystem.FilesystemError;
  public final static native long posixfs_new_acl(long jarg1, posixfs jarg1_) throws it.grid.storm.filesystem.FilesystemError;
  public final static native void delete_posixfs(long jarg1);
  public final static native long new_posixfs_acl();
  public final static native void posixfs_acl_load__SWIG_0(long jarg1, posixfs_acl jarg1_, String jarg2, boolean jarg3) throws it.grid.storm.filesystem.FilesystemError, it.grid.storm.filesystem.InvalidPathException, it.grid.storm.filesystem.InvalidPermissionOnFileException, it.grid.storm.filesystem.AclNotSupported, java.lang.RuntimeException;
  public final static native void posixfs_acl_load__SWIG_1(long jarg1, posixfs_acl jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError, it.grid.storm.filesystem.InvalidPathException, it.grid.storm.filesystem.InvalidPermissionOnFileException, it.grid.storm.filesystem.AclNotSupported, java.lang.RuntimeException;
  public final static native void posixfs_acl_enforce(long jarg1, posixfs_acl jarg1_, String jarg2) throws it.grid.storm.filesystem.FilesystemError, it.grid.storm.filesystem.InvalidPathException, it.grid.storm.filesystem.InvalidPermissionOnFileException, it.grid.storm.filesystem.AclNotSupported, java.lang.RuntimeException;
  public final static native int posixfs_acl_to_permission_t(int jarg1);
  public final static native int posixfs_acl_from_permission_t(int jarg1);
  public final static native void delete_posixfs_acl(long jarg1);
  public final static native int uid_from_username(String jarg1) throws java.lang.RuntimeException;
  public final static native int gid_from_groupname(String jarg1) throws java.lang.RuntimeException;
  public final static native String username_from_uid(int jarg1);
  public final static native String groupname_from_gid(int jarg1);
  public final static native long new_not_found(String jarg1);
  public final static native void delete_not_found(long jarg1);
  public final static native long system_error_SWIGUpcast(long jarg1);
  public final static native long acl_not_supported_SWIGUpcast(long jarg1);
  public final static native long invalid_path_SWIGUpcast(long jarg1);
  public final static native long permission_denied_SWIGUpcast(long jarg1);
  public final static native long wrong_filesystem_type_SWIGUpcast(long jarg1);
  public final static native long quota_not_supported_SWIGUpcast(long jarg1);
  public final static native long posixfs_SWIGUpcast(long jarg1);
  public final static native long posixfs_acl_SWIGSmartPtrUpcast(long jarg1);
}
